using System;
using System.Security.Cryptography;
using System.Text;
using System.Text.Json;
using System.IO;
using System.Xml;

static void Main()
{
    Console.WriteLine("init, create, get, set, secret, change");
    string x = Console.ReadLine();
    if(x == "init")
    {
        Console.WriteLine("init");
    }
    else if(x == "create")
    {
        Console.WriteLine("create");
    }
    else if(x == "get")
    {
        Console.WriteLine("get");
    }
    else if (x == "set")
    {
        Console.WriteLine("set");
    }
    else if (x == "secret")
    {
        Console.WriteLine("secret");
    }
    else if (x == "change")
    {
        Console.WriteLine("change");
    }


}

private byte[] GenerateVaultKey(string masterPsw, byte[] secretKey)
{
    byte[] bytesMasterPsw = Encoding.UTF8.GetBytes(masterPsw);

    // Skapa en array som kan hålla båda
    byte[] vaultKey = new byte[bytesMasterPsw.Length + secretKey.Length];

    // Kopiera masterPsw till vaultKey
    Buffer.BlockCopy(bytesMasterPsw, 0, vaultKey, 0, bytesMasterPsw.Length);

    // Kopiera secretKey till vaultKey direkt efter masterPsw
    Buffer.BlockCopy(secretKey, 0, vaultKey, bytesMasterPsw.Length, secretKey.Length);

    // Skapa en slumpmässig salt (bör vara unik per användning)
    byte[] salt = new byte[16];
    using (var rng = RandomNumberGenerator.Create())
    {
        rng.GetBytes(salt);
    }

    // PBKDF2 för att härleda en säker nyckel
    using (var pbkdf2 = new Rfc2898DeriveBytes(vaultKey, salt, 10000, HashAlgorithmName.SHA256))
    {
        return pbkdf2.GetBytes(32); // Returnerar en 256-bitars nyckel
    }
}
